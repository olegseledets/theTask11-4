#include <iostream>
#include <cmath>

int main(){
  float X, Y, Z;
  std::cout << "Введите размер бруска\n";
  std::cout << "X: ";
  std::cin >> X;
  std::cout << "Y: ";
  std::cin >> Y;
  std::cout << "Z: ";
  std::cin >> Z;
  if (X <= 0 || Y <= 0 || Z <= 0){
    std::cout << "Размеры бруска должны быть больше нуля.\n";
  } 
  else{
    int cubFromX = (int) X / 5;
    int cubFromY = (int) Y / 5;
    int cubFromZ = (int) Z / 5;
    int totalCubes = cubFromX * cubFromY * cubFromZ;
    int countCubes = 0;
    for (int i = 1; ; i++) {
      int setOfCubes = pow(i, 3);
      if (setOfCubes <= totalCubes){
        countCubes = setOfCubes;
      }
      else{
        break;
      }
    }
    std::cout << "Из этого бруска можно изготовить " << totalCubes << " кубиков\n";
    if (countCubes > 1){
      std::cout << "Из них можно составить набор из " << countCubes << " кубиков\n";
    }
    else{
      std::cout << "Из них нельзя составить набор\n";
    }
  }
}

/*
Задача 4. Игрушечная история
Вы решили открыть бизнес по производству игровых деревянных кубиков для детей. Вы узнали, что лучше всего продаются кубики со стороной 5 сантиметров в наборах по несколько штук, причём кубиков в наборе должно быть достаточно, чтобы сложить из них один большой куб. Для изготовления кубиков к вам в мастерскую поступают деревянные бруски в форме прямоугольных параллелепипедов любых размеров.
Для оптимизации бизнес-процессов напишите программу, которая по заданным размерам исходного бруска определяет, сколько кубиков из него можно изготовить, можно ли из них составить набор для продажи, и если можно, то максимальное число кубиков в этом наборе. Все кубики должны быть из цельного дерева без использования клея. Размеры бруска — вещественные числа. Обеспечьте контроль ввода.
  Пример
    Ввод:
Введите размеры бруска
X: 5;
Y: 35.76;
Z: 35.05.
    Вывод:
Из этого бруска можно изготовить 49 кубиков.
Из них можно составить набор из 27 кубиков.
*/